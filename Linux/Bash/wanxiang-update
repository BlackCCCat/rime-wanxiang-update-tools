#!/bin/bash

TEMPDIR=$(mktemp -d)
DEPLOYDIR="$HOME/.local/share/fcitx5/rime"
GHURL="https://github.com/amzxyz"
# 定义方案
declare -A dicts_map=(
  ["moqi"]="1-moqi_dicts.zip"
  ["flypy"]="2-flypy_dicts.zip"
  ["zrm"]="3-zrm_dicts.zip"
  ["jdh"]="4-jdh_dicts.zip"
  ["cj"]="5-cj_dicts.zip"
  ["tiger"]="6-tiger_dicts.zip"
  ["wubi"]="7-wubi_dicts.zip"
  ["hanxin"]="8-hanxin_dicts.zip"
)

if ! command -v wget &> /dev/null; then
  echo "请安装 wget"
  exit 1
fi

if ! command -v unzip &> /dev/null; then
  echo "请安装 unzip"
  exit 1
fi

update_schema() {
  local version=$1
  local schema=$2
  local schema_url="$GHURL/rime_wanxiang_pro/releases/download/v$version/wanxiang-$schema-fuzhu.zip"
  if ! wget -qO "$TEMPDIR/wanxiang-$schema-fuzhu.zip" "$schema_url"; then
    echo "下载失败，请检查网络连接是否正确。"
    exit 1
  fi
  if ! unzip -q "$TEMPDIR/wanxiang-$schema-fuzhu.zip" -d "$TEMPDIR"; then
    echo "下载出错，文件解压失败。"
    exit 1
  fi
  # 删除无用文件
  rm -r "$TEMPDIR/wanxiang-$schema-fuzhu/简纯+.trime.yaml"  \
        "$TEMPDIR/wanxiang-$schema-fuzhu/custom_phrase.txt" \
        "$TEMPDIR/wanxiang-$schema-fuzhu/squirrel.yaml"     \
        "$TEMPDIR/wanxiang-$schema-fuzhu/weasel.yaml"
  # 排除用户自定义文件与语法模型
  local excludes=" -not -path \"$DEPLOYDIR/wanxiang-lts-zh-hans.gram\""
  while IFS= read -r line; do
    if [[ -n "$line" ]]; then
      excludes="$excludes -not -path \"$DEPLOYDIR/$line/*\" -not -path \"$DEPLOYDIR/$line\""
    fi
  done < "$EXCLUDE_FILE"
  eval "find \"$DEPLOYDIR\" -mindepth 1 \( $excludes \) -exec rm -rf {} +" && sleep 2
  cp -rf "$TEMPDIR/wanxiang-$schema-fuzhu/"* "$RIMEDIR"
  echo "方案文件更新成功！"
}

update_dicts() {
  local dicts=${dicts_map[$1]}
  local schema=$1
  local dicts_url="$GHURL/rime_wanxiang_pro/releases/download/dict-nightly/$dicts"
  if ! wget -qO "$TEMPDIR/$dicts" "$dicts_url"; then
    echo "下载失败，请检查网络连接是否正确。"
    exit 1
  fi
  if ! unzip -q "$TEMPDIR/$dicts" -d "$TEMPDIR"; then
    echo "下载出错，文件解压失败。"
    exit 1
  fi
  rm -r "$RIMEDIR/cn_dicts/"* && sleep 2
  cp -rf "$TEMPDIR/${schema}_dicts"/* "$RIMEDIR/cn_dicts"
  echo "词典文件更新成功！"
}

update_gram() {
  local local_file="$RIMEDIR/wanxiang-lts-zh-hans.gram"
  local remote_md5_url="$GHURL/RIME-LMDG/releases/download/LTS/md5sum.txt"
  local_md5=$(md5sum "$local_file" | awk '{ print $1 }')
  remote_md5=$(wget -qO- "$remote_md5_url" | head -n 1 | awk '{ print $1 }')
  if [ "$local_md5" != "$remote_md5" ]; then
    echo "语法模型需要更新，正在下载..."
    local gram_url="$GHURL/RIME-LMDG/releases/download/LTS/wanxiang-lts-zh-hans.gram"
    if ! wget -O "$TEMPDIR/wanxiang-lts-zh-hans.gram" "$gram_url"; then
      echo "下载失败，请检查网络连接是否正确。"
      exit 1
    fi
    rm -r "$RIMEDIR/wanxiang-lts-zh-hans.gram" && sleep 2
    cp -rf "$TEMPDIR/wanxiang-lts-zh-hans.gram" "$RIMEDIR"
    echo "语法模型更新成功！"
  else
    echo "语法模型无需更新"
  fi
}

# 提示用户输入
read -r -p "请输入方案名 (例如 zrm): " SCHEMA
read -r -p "请输入版本 (例如 6.8): " VERSION
read -r -p "请输入部署目录 (默认为 $DEPLOYDIR): " RIMEDIR
if [[ -z "$RIMEDIR" ]]; then
  RIMEDIR=$DEPLOYDIR
fi
EXCLUDE_FILE="$RIMEDIR/usercustom.txt"
if [[ ! -f "$EXCLUDE_FILE" ]]; then
  echo "错误：$EXCLUDE_FILE 文件不存在！"
  echo "请将更新时需要保留的文件、文件夹写入 $EXCLUDE_FILE 文件中，每行一个。"
  echo "$EXCLUDE_FILE 文件每次更新均会保留。"
  printf "例如: \nwanxiang.schema.yaml\nwanxiang_en.custom.yaml\nwanxiang_radical.custom.yaml\n\n"
  exit 1
fi

# 检查输入是否在数组中
if [[ -n "${dicts_map[$SCHEMA]}" ]]; then
  echo "你选择了方案：$SCHEMA, 开始更新......"
  echo "正在更新方案文件......" && update_schema "$VERSION" "$SCHEMA"
  echo "正在更新词典文件......" && update_dicts "$SCHEMA"
  echo "正在更新语法模型......" && update_gram
  echo "更新完毕，请重新部署方案！"
else
  echo "该方案不存在！请检查你的输入！"
fi
