#!/usr/bin/env bash

set -euo pipefail

#### 配置 Rime 部署目录 ####
# 支持相对路径、绝对路径、拓展变量
# 例如 "/home/user/.local/share/fcitx5/rime"
# 例如 "$HOME/.local/share/fcitx5/rime"
# 例如 "${XDG_DATA_HOME:-$HOME/.local/share}/fcitx5/rime"

DEPLOY_DIR=""

######### 配置结束 #########

# 全局变量
SCHEMA_API="https://api.github.com/repos/amzxyz/rime_wanxiang/releases"
GRAM_API="https://api.github.com/repos/amzxyz/RIME-LMDG/releases"
TOOLS_API="https://api.github.com/repos/expoli/rime-wanxiang-update-tools/releases"
FUZHU_LIST=("all" "base" "flypy" "hanxin" "jdh" "moqi" "tiger" "wubi" "zrm")
TEMP_DIR=$(mktemp -d /tmp/wanxiang-update-XXXXXX)
UPDATE_TOOLS_VERSION="DEFAULT_UPDATE_TOOLS_VERSION_TAG"

# 日志与错误处理
log() {
  local red="\033[0;31m" green="\033[0;32m" yellow="\033[0;33m" nc="\033[0m"
  local level="$1" color="$nc"
  case "$level" in
  INFO) color="$green" ;;
  WARN) color="$yellow" ;;
  ERROR) color="$red" ;;
  esac
  shift
  printf "${color}[%s] %s${nc}\n" "$level" "$*"
}
error_exit() {
  log ERROR "$*"
  cleanup
  exit 1
}
cleanup() {
  if [[ -d "$TEMP_DIR" ]]; then
    rm -rf "$TEMP_DIR" || log WARN "清理缓存文件失败"
  fi
}
deps_check() {
  for _cmd in curl jq unzip sha256sum; do
    command -v "$_cmd" >/dev/null || error_exit "缺少必要依赖：$_cmd"
  done
}
fuzhu_check() {
  local fuzhu_check="$1"
  for _fuzhu in "${FUZHU_LIST[@]}"; do
    if [[ "$fuzhu_check" == "$_fuzhu" ]]; then
      return 0
    fi
  done
  return 1
}
script_check() {
  if [[ "$UPDATE_TOOLS_VERSION" =~ ^"DEFAULT" ]]; then
    log WARN "您似乎正在使用源文件！"
    log WARN "请从 Release 页面下载正式版！"
    error_exit "终止操作"
  fi
  log INFO "工具当前版本 $UPDATE_TOOLS_VERSION"
  log INFO "正在检查本工具是否存在更新"
  local local_version remote_version
  local_version="$UPDATE_TOOLS_VERSION"
  remote_version=$(
    curl -sL --connect-timeout 10 $TOOLS_API |
      jq -r '.[].tag_name' | grep -vE "rc" | sort -rV | head -n 1
  )
  if [[ "$remote_version" > "$local_version" ]]; then
    log WARN "检测到工具最新版本为: $remote_version, 建议更新后继续"
  else
    log INFO "工具已是最新版本"
  fi
}

update_schema_cnb() {
  local fuzhu="$1" gram="$2"
  local local_version remote_version
  if [[ -f "$DEPLOY_DIR/lua/wanxiang.lua" ]]; then
    local_version=v$(grep "wanxiang.version" "$DEPLOY_DIR/lua/wanxiang.lua" | awk -F '"' '{print $2}')
  else
    local_version="v0"
  fi
  log INFO "当前方案文件版本号为 $local_version"
  # 获取远程版本号
  remote_version=$(
    curl -sL --connect-timeout 10 \
      "https://cnb.cool/amzxyz/rime-wanxiang/-/git/raw/wanxiang/lua/wanxiang.lua" |
      grep "wanxiang.version" | awk -F '"' '{print $2}'
  )
  if [[ "$remote_version" > "$local_version" ]]; then
    log INFO "方案文件最新版本号为 $remote_version 正在下载文件"
    local schemaurl schemaname
    [[ "$fuzhu" == "base" ]] || fuzhu="$fuzhu-fuzhu"
    schemaname="rime-wanxiang-$fuzhu.zip"
    schemaurl="https://cnb.cool/amzxyz/rime-wanxiang/-/releases/download/$remote_version/$schemaname"
    curl -L --connect-timeout 10 -o "$TEMP_DIR/$schemaname" "$schemaurl"
    log INFO "下载成功，开始更新方案文件"
    unzip -q "$TEMP_DIR/$schemaname" -d "$TEMP_DIR/${schemaname%.zip}"
    for _file in "简纯+.trime.yaml" "custom_phrase.txt" "squirrel.yaml" "weasel.yaml"; do
      if [[ -f "$TEMP_DIR/${schemaname%.zip}/$_file" ]]; then
        rm -r "$TEMP_DIR/${schemaname%.zip}/${_file:?}"
      fi
    done
    local exclude_file
    while IFS= read -r _line; do
      if [[ "$_line" != \#* ]]; then
        exclude_file="$_line"
        if [[ ! -e "$DEPLOY_DIR/$exclude_file" ]]; then
          log WARN "项目 $DEPLOY_DIR/$exclude_file 不存在，跳过备份！"
        else
          cp -rf "$DEPLOY_DIR/$exclude_file" "$TEMP_DIR/${schemaname%.zip}/$exclude_file"
        fi
      fi
    done <"$DEPLOY_DIR/user_exclude_file.txt"
    # 单独处理语法模型
    [[ "$gram" == "true" ]] || cp -rf "$DEPLOY_DIR/wanxiang-lts-zh-hans.gram" \
      "$TEMP_DIR/${schemaname%.zip}/wanxiang-lts-zh-hans.gram"
    rm -rf "${DEPLOY_DIR:?}"
    cp -rf "$TEMP_DIR/${schemaname%.zip}" "$DEPLOY_DIR"
    log INFO "方案文件更新成功"
  else
    log INFO "方案文件无需更新"
  fi
}

update_dict_cnb() {
  local fuzhu="$1"
  log WARN "因技术原因，我们无法确认词典文件是否需要更新"
  log WARN "我们默认您需要更新, 3 秒后更新开始"
  sleep 3
  log INFO "正在下载最新词典文件"
  local dicturl dictname dictmap
  declare -A dictmap=(
    ["moqi"]="1-pro-moqi-fuzhu-dicts.zip"
    ["flypy"]="2-pro-flypy-fuzhu-dicts.zip"
    ["zrm"]="3-pro-zrm-fuzhu-dicts.zip"
    ["jdh"]="4-pro-jdh-fuzhu-dicts.zip"
    ["tiger"]="5-pro-tiger-fuzhu-dicts.zip"
    ["wubi"]="6-pro-wubi-fuzhu-dicts.zip"
    ["hanxin"]="7-pro-hanxin-fuzhu-dicts.zip"
    ["all"]="8-pro-all-dicts.zip"
    ["base"]="9-base-dicts.zip"
  )
  dictname="${dictmap[$fuzhu]}"
  dicturl="https://cnb.cool/amzxyz/rime-wanxiang/-/releases/download/v1.0.0/$dictname"
  curl -L --connect-timeout 10 -o "$TEMP_DIR/$dictname" "$dicturl"
  log INFO "下载成功，开始更新词典文件"
  unzip -q "$TEMP_DIR/$dictname" -d "$TEMP_DIR"
  dictname="${dictname:2}"
  dictname="${dictname%.zip}"
  cp -rf "$TEMP_DIR/$dictname"/* "$DEPLOY_DIR/dicts"
  log INFO "词典文件更新成功"
}

update_gram_cnb() {
  log WARN "因技术原因，我们无法确认语法模型是否需要更新"
  log WARN "我们默认您需要更新, 3 秒后更新开始"
  sleep 3
  log INFO "正在下载最新语法模型"
  curl -L --connect-timeout 10 -o "$TEMP_DIR/wanxiang-lts-zh-hans.gram" \
    "https://cnb.cool/amzxyz/rime-wanxiang/-/releases/download/model/wanxiang-lts-zh-hans.gram"
  log INFO "下载成功，开始更新语法文件"
  cp -rf "$TEMP_DIR/wanxiang-lts-zh-hans.gram" "${DEPLOY_DIR}/wanxiang-lts-zh-hans.gram"
  log INFO "语法模型更新成功"
}

update_schema() {
  local fuzhu="$1" gram="$2"
  # 缓存 GitHub API 响应
  if [[ ! -f "$TEMP_DIR/schema_$fuzhu.json" ]]; then
    if ! curl -sL --connect-timeout 10 "$SCHEMA_API" >"$TEMP_DIR/schema_$fuzhu.json"; then
      error_exit "连接到 GitHub API 失败，您可能需要检查网络"
    fi
  fi
  # 获取本地版本号
  local local_version remote_version
  if [[ -f "$DEPLOY_DIR/lua/wanxiang.lua" ]]; then
    local_version=v$(grep "wanxiang.version" "$DEPLOY_DIR/lua/wanxiang.lua" | awk -F '"' '{print $2}')
  else
    local_version="v0"
  fi
  log INFO "当前方案文件版本号为 $local_version"
  # 获取远程版本号
  remote_version=$(
    jq -r '.[].tag_name' "$TEMP_DIR/schema_$fuzhu.json" |
      grep -vE "dict-nightly" | sort -rV | head -n 1
  )
  if [[ "$remote_version" > "$local_version" ]]; then
    log INFO "方案文件最新版本号为 $remote_version, 以下内容为更新日志"
    local changelog
    changelog=$(
      jq -r --arg version "$remote_version" '.[] |
      select(.tag_name == $version ) | .body' "$TEMP_DIR/schema_$fuzhu.json"
    )
    echo -e "$changelog" | sed -n '/## 📝 更新日志/,/## 🚀 下载引导/p' | head -n -1
    sleep 3
    log INFO "开始更新方案文件，正在下载文件"
    local schemaurl schemaname local_sha256sum remote_sha256sum
    schemaurl=$(
      jq -r --arg version "$remote_version" --arg name "$fuzhu" '.[] |
      select(.tag_name == $version ) | .assets.[] |
      select(.name | test($name)) | .browser_download_url' "$TEMP_DIR/schema_$fuzhu.json"
    )
    schemaname=$(
      jq -r --arg version "$remote_version" --arg name "$fuzhu" '.[] |
      select(.tag_name == $version ) | .assets.[] |
      select(.name | test($name)) | .name' "$TEMP_DIR/schema_$fuzhu.json"
    )
    curl -L --connect-timeout 10 -o "$TEMP_DIR/$schemaname" "$schemaurl"
    log INFO "正在验证文件完整性"
    local_sha256sum=$(sha256sum "$TEMP_DIR/$schemaname" | awk '{print $1}')
    remote_sha256sum=$(
      jq -r --arg version "$remote_version" --arg name "$fuzhu" '.[] |
      select(.tag_name == $version) | .assets.[] |
      select(.name | test($name)) | .digest' "$TEMP_DIR/schema_$fuzhu.json" |
        awk -F ':' '{print $2}'
    )
    [[ "$local_sha256sum" == "$remote_sha256sum" ]] || error_exit "方案文件下载出错，请重试！"
    log INFO "验证成功，开始更新方案文件"
    unzip -q "$TEMP_DIR/$schemaname" -d "$TEMP_DIR/${schemaname%.zip}"
    for _file in "简纯+.trime.yaml" "custom_phrase.txt" "squirrel.yaml" "weasel.yaml"; do
      if [[ -f "$TEMP_DIR/${schemaname%.zip}/$_file" ]]; then
        rm -r "$TEMP_DIR/${schemaname%.zip}/${_file:?}"
      fi
    done
    local exclude_file
    while IFS= read -r _line; do
      if [[ "$_line" != \#* ]]; then
        exclude_file="$_line"
        if [[ ! -e "$DEPLOY_DIR/$exclude_file" ]]; then
          log WARN "项目 $DEPLOY_DIR/$exclude_file 不存在，跳过备份！"
        else
          cp -rf "$DEPLOY_DIR/$exclude_file" "$TEMP_DIR/${schemaname%.zip}/$exclude_file"
        fi
      fi
    done <"$DEPLOY_DIR/user_exclude_file.txt"
    # 单独处理语法模型
    [[ "$gram" == "true" ]] || cp -rf "$DEPLOY_DIR/wanxiang-lts-zh-hans.gram" \
      "$TEMP_DIR/${schemaname%.zip}/wanxiang-lts-zh-hans.gram"
    rm -rf "${DEPLOY_DIR:?}"
    cp -rf "$TEMP_DIR/${schemaname%.zip}" "$DEPLOY_DIR"
    log INFO "方案文件更新成功"
  else
    log INFO "方案文件无需更新"
  fi
}
update_dict() {
  local fuzhu="$1"
  # 缓存 GitHub API 响应
  if [[ ! -f "$TEMP_DIR/schema_$fuzhu.json" ]]; then
    if ! curl -sL --connect-timeout 10 "$SCHEMA_API" >"$TEMP_DIR/schema_$fuzhu.json"; then
      error_exit "连接到 GitHub API 失败，您可能需要检查网络"
    fi
  fi
  local local_date remote_date
  if [[ -f "$DEPLOY_DIR/dicts/chengyu.txt" ]]; then
    local_date=$(stat -c %Z "$DEPLOY_DIR/dicts/chengyu.txt")
  else
    local_date=0
  fi
  remote_date=$(
    jq -r --arg version "dict-nightly" --arg name "$fuzhu" '.[] |
    select(.tag_name == $version ) | .assets.[] |
    select(.name | test($name)) | .updated_at' "$TEMP_DIR/schema_$fuzhu.json"
  )
  remote_date=$(date -d "$remote_date" +%s)
  if [[ $remote_date -gt $local_date ]]; then
    log INFO "正在下载最新词典文件"
    local dicturl dictname local_sha256sum remote_sha256sum
    dicturl=$(
      jq -r --arg version "dict-nightly" --arg name "$fuzhu" '.[] |
      select(.tag_name == $version ) | .assets.[] |
      select(.name | test($name)) | .browser_download_url' "$TEMP_DIR/schema_$fuzhu.json"
    )
    dictname=$(
      jq -r --arg version "dict-nightly" --arg name "$fuzhu" '.[] |
      select(.tag_name == $version ) | .assets.[] |
      select(.name | test($name)) | .name' "$TEMP_DIR/schema_$fuzhu.json"
    )
    curl -L --connect-timeout 10 -o "$TEMP_DIR/$dictname" "$dicturl"
    log INFO "正在验证文件完整性"
    local_sha256sum=$(sha256sum "$TEMP_DIR/$dictname" | awk '{print $1}')
    remote_sha256sum=$(
      jq -r --arg version "dict-nightly" --arg name "$fuzhu" '.[] |
      select(.tag_name == $version ) | .assets.[] |
      select(.name | test($name)) | .digest' "$TEMP_DIR/schema_$fuzhu.json" |
        awk -F ':' '{print $2}'
    )
    [[ "$local_sha256sum" == "$remote_sha256sum" ]] || error_exit "词典文件下载出错，请重试！"
    log INFO "验证成功，开始更新词典文件"
    unzip -q "$TEMP_DIR/$dictname" -d "$TEMP_DIR"
    dictname="${dictname:2}"
    dictname="${dictname%.zip}"
    cp -rf "$TEMP_DIR/$dictname"/* "$DEPLOY_DIR/dicts"
    log INFO "词典文件更新成功"
  else
    local_date=$(date -d "@$local_date" +"%Y-%m-%d %H:%M:%S")
    log INFO "词典文件最后更新于 $local_date, 您目前无需更新它"
  fi
}
update_gram() {
  # 缓存 GitHub API 响应
  if ! curl -sL --connect-timeout 10 "$GRAM_API" >"$TEMP_DIR/gram.json"; then
    error_exit "连接到 GitHub API 失败，您可能需要检查网络"
  fi
  local local_date remote_date gramname="wanxiang-lts-zh-hans.gram"
  if [[ -f "$DEPLOY_DIR/$gramname" ]]; then
    local_date=$(stat -c %Z "$DEPLOY_DIR/$gramname")
  else
    local_date=0
  fi
  remote_date=$(
    jq -r --arg version "LTS" --arg name "$gramname" '.[] |
    select(.tag_name == $version ) | .assets.[] |
    select(.name | test($name)) | .updated_at' "$TEMP_DIR/gram.json"
  )
  remote_date=$(date -d "$remote_date" +%s)
  if [[ $remote_date -gt $local_date ]]; then
    log INFO "正在下载最新语法模型"
    local gramurl local_sha256sum remote_sha256sum
    gramurl=$(
      jq -r --arg version "LTS" --arg name "$gramname" '.[] |
      select(.tag_name == $version ) | .assets.[] |
      select(.name | test($name)) | .browser_download_url' "$TEMP_DIR/gram.json"
    )
    curl -L --connect-timeout 10 -o "$TEMP_DIR/$gramname" "$gramurl"
    log INFO "正在验证文件完整性"
    local_sha256sum=$(sha256sum "$TEMP_DIR/$gramname" | awk '{print $1}')
    remote_sha256sum=$(
      jq -r --arg version "LTS" --arg name "$gramname" '.[] |
      select(.tag_name == $version) | .assets.[] |
      select(.name == $name) | .digest' "$TEMP_DIR/gram.json" |
        awk -F ':' '{print $2}'
    )
    [[ "$local_sha256sum" == "$remote_sha256sum" ]] || error_exit "语法模型下载出错，请重试！"
    log INFO "验证成功，开始语法模型文件"
    cp -rf "$TEMP_DIR/$gramname" "${DEPLOY_DIR}/$gramname"
    log INFO "语法模型更新成功"
  else
    local_date=$(date -d "@$local_date" +"%Y-%m-%d %H:%M:%S")
    log INFO "语法模型最后更新于 $local_date, 您目前无需更新它"
  fi
}

main() {
  # 脚本退出清理临时目录
  trap cleanup EXIT
  # 欢迎语
  log INFO "欢迎使用万象方案更新助手"
  # 检查是否为root用户
  if [[ "$EUID" -eq 0 ]]; then
    error_exit "请不要使用 root 身份运行该脚本！"
  fi
  # 检查必要的依赖
  deps_check
  # 处理用户输入
  local mirror="" depdir="" inputime="" schema="" fuzhu="" dict="false" gram="false"
  # 解析命令行参数
  while [[ "$#" -gt 0 ]]; do
    case $1 in
    --mirror)
      if [[ -n "$mirror" ]]; then
        error_exit "选项 mirror 需要参数！"
      else
        shift
      fi
      if [[ "$1" != "cnb" ]]; then
        error_exit "选项 mirror 的参数目前只能为 cnb"
      else
        mirror="$1"
      fi
      ;;
    --depdir)
      if [[ -n "$depdir" ]]; then
        error_exit "选项 depdir 需要参数！"
      else
        shift
      fi
      DEPLOY_DIR="$1"
      ;;
    --inputime)
      if [[ -n "$inputime" ]]; then
        error_exit "选项 inputime 需要参数！"
      else
        shift
      fi
      if [[ "$1" != "fcitx5" && "$1" != "ibus" ]]; then
        error_exit "选项 inputime 的参数只能为 fcitx5 或 ibus"
      else
        inputime="$1"
      fi
      ;;
    --schema)
      if [[ -n "$schema" ]]; then
        error_exit "选项 scheam 需要参数！"
      else
        shift
      fi
      if [[ "$1" != "base" && "$1" != "pro" ]]; then
        error_exit "选项 scheam 的参数只能为 base 或 pro"
      else
        schema="$1"
      fi
      ;;
    --fuzhu)
      if [[ -n "$fuzhu" ]]; then
        error_exit "选项 fuzhu 需要参数！"
      else
        shift
      fi
      if fuzhu_check "$1"; then
        fuzhu="$1"
      else
        error_exit "选项 fuzhu 的参数只能为 ${FUZHU_LIST[*]} 其中之一"
      fi
      ;;
    --dict)
      dict="true"
      ;;
    --gram)
      gram="true"
      ;;
    *)
      log WARN "您可能错误的使用了该脚本"
      log WARN "请前往 GitHub 页面阅读 Readme"
      error_exit "参数输入错误: $1"
      ;;
    esac
    shift
  done
  # 判断是否设置了部署目录
  if [[ -n "$DEPLOY_DIR" ]]; then
    if [[ ! -d "$DEPLOY_DIR" ]]; then
      log WARN "部署目录 $DEPLOY_DIR 不存在，您要创建它吗？"
      read -rp "请输入 YES 或 NO (区分大小写) " _check
      if [[ "$_check" == "YES" ]]; then
        log WARN "您真的要创建该目录吗？您确定您的设置正确吗？"
        read -rp "请输入 YES 或 NO (区分大小写) " _check_again
        [[ "$_check_again" == "YES" ]] || error_exit "用户终止操作"
        mkdir -p "$DEPLOY_DIR"
      else
        error_exit "用户终止操作"
      fi
    fi
  else
    error_exit "请设置部署目录！"
  fi
  # 排除项目列表文件是否存在
  if [[ ! -f "$DEPLOY_DIR/user_exclude_file.txt" ]]; then
    log WARN "您没有设置排除项目列表！"
    log WARN "您需要创建的文件为 $DEPLOY_DIR/user_exclude_file.txt"
    log WARN "请在该文件中写入您需要排除的项目，每行一个"
    log WARN "如果您确实不需要排除任何文件，请创建一个空文件来抑制该警告"
    error_exit "$DEPLOY_DIR/user_exclude_file.txt 文件不存在"
  fi
  # 检查 schema 和 fuzhu 是否同时存在
  if [[ -n "$schema" && -z "$fuzhu" ]]; then
    error_exit "选项 schema 与选项 fuzhu 必须同时使用"
  fi
  # 检查 dict 和 fuzhu 是否同时存在
  if [[ "$dict" == "true" && -z "$fuzhu" ]]; then
    error_exit "选项 dict 与选项 fuzhu 必须同时使用"
  fi
  # 检查当 schema 为 base 时，fuzhu 是否也为 base
  if [[ "$schema" == "base" && "$fuzhu" != "base" ]]; then
    error_exit "当选项 schema 为 base 时，选项 fuzhu 必须为 base"
  fi
  # 开始更新
  if [[ "$mirror" == "cnb" ]]; then
    if [[ "$UPDATE_TOOLS_VERSION" =~ ^"DEFAULT" ]]; then
      log WARN "您似乎正在使用源文件！"
      log WARN "请从 Release 页面下载正式版！"
      error_exit "终止操作"
    fi
    log INFO "工具当前版本 $UPDATE_TOOLS_VERSION"
    log WARN "由于您正在使用镜像，无法检查本工具是否存在更新"
    [[ -z "$schema" ]] || update_schema_cnb "$fuzhu" "$gram"
    [[ "$dict" == "false" ]] || update_dict_cnb "$fuzhu"
    [[ "$gram" == "false" ]] || update_gram_cnb
  else
    # 检查 GitHub 连接状态
    log INFO "正在检查 GitHub 连接状态"
    if ! curl -sL --connect-timeout 5 "https://api.github.com" >/dev/null; then
      error_exit "您似乎无法连接到 GitHub API, 请检查您的网络"
    elif ! curl -sL --connect-timeout 5 "https://github.com" >/dev/null; then
      error_exit "您似乎无法连接到 GitHub, 请检查您的网络"
    fi
    # 脚本自检
    script_check
    # 开始更新
    [[ -z "$schema" ]] || update_schema "$fuzhu" "$gram"
    [[ "$dict" == "false" ]] || update_dict "$fuzhu"
    [[ "$gram" == "false" ]] || update_gram
  fi
  # 自动部署
  if [[ "$inputime" == "fcitx5" ]]; then
    if command -v qdbus6 >/dev/null; then
      log INFO "更新完成。已检测到 Fcitx5 守护进程，正在自动部署"
      qdbus6 org.fcitx.Fcitx5 /controller org.fcitx.Fcitx.Controller1.SetConfig "fcitx://config/addon/rime/deploy" ""
    fi
  elif [[ "$inputime" == "ibus" ]]; then
    if command -v ibus-daemon >/dev/null; then
      log INFO "更新完成。已检测到 iBus 守护进程，正在自动部署"
      ibus-daemon -drx
    fi
  else
    # 提示用户重新进行部署
    log INFO "更新完成。请手动重新部署 rime"
  fi
}

main "$@"
